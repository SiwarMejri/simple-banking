import json
import requests
from reportlab.lib.pagesizes import A4
from reportlab.lib import colors
from reportlab.platypus import Table, TableStyle, SimpleDocTemplate, Paragraph, Spacer
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
import argparse
import base64
import os

# === Chargement des donn√©es JSON ===
def load_json(file_path):
    if os.path.exists(file_path):
        with open(file_path, 'r') as f:
            return json.load(f)
    return {}

# === R√©cup√©ration des m√©triques SonarQube ===
def fetch_sonarqube_metrics(project_key, sonar_url='http://192.168.240.139:9000', token=None):
    api_url = f"{sonar_url}/api/measures/component?component={project_key}&metricKeys=bugs,vulnerabilities,code_smells,coverage,duplicated_lines_density,ncloc"
    headers = {}

    if token:
        # Encodage Base64 de "<token>:"
        encoded_token = base64.b64encode(f"{token}:".encode()).decode()
        headers['Authorization'] = f"Basic {encoded_token}"

    try:
        response = requests.get(api_url, headers=headers)
        response.raise_for_status()
        return response.json()
    except requests.exceptions.HTTPError as http_err:
        print(f"‚ö†Ô∏è Erreur SonarQube HTTP: {http_err} ({response.status_code})")
        print(f"URL: {api_url}")
        print("üí° V√©rifie ton token et tes permissions dans SonarQube (Administration > Security > Tokens).")
        return {}
    except Exception as e:
        print(f"‚ö†Ô∏è Erreur SonarQube: {e}")
        return {}

# === Formatage des r√©sultats Trivy ===
def format_trivy_results(trivy_data):
    rows = [["CVE", "Package", "Severity", "Installed Version", "Fixed Version"]]
    for result in trivy_data.get('Results', []):
        for v in result.get('Vulnerabilities', []):
            rows.append([
                v.get('VulnerabilityID', ''),
                v.get('PkgName', ''),
                v.get('Severity', ''),
                v.get('InstalledVersion', ''),
                v.get('FixedVersion', '')
            ])
    return rows

# === G√©n√©ration du PDF ===
def generate_pdf(trivy_fs, trivy_img, sonar_metrics, output_file):
    doc = SimpleDocTemplate(output_file, pagesize=A4, title="Rapport CI/CD - SonarQube + Trivy")
    elements = []
    styles = getSampleStyleSheet()

    # Styles personnalis√©s
    styles.add(ParagraphStyle(name='SubTitle', fontSize=12, textColor=colors.HexColor("#4B4B4B"), spaceAfter=8))
    styles.add(ParagraphStyle(name='Advice', fontSize=10, textColor=colors.HexColor("#555555"), leftIndent=15, spaceAfter=6))
    styles.add(ParagraphStyle(name='Section', fontSize=14, textColor=colors.HexColor("#1F4E79"), spaceAfter=10, leading=16))
    styles.add(ParagraphStyle(name='NormalGray', fontSize=10, textColor=colors.HexColor("#333333"), spaceAfter=8))

    # === Titre principal ===
    elements.append(Paragraph("üìä Rapport CI/CD - SonarQube + Trivy", styles['Title']))
    elements.append(Spacer(1, 15))
    elements.append(Paragraph("R√©sum√© ex√©cutif", styles['Section']))
    elements.append(Paragraph(
        "Ce rapport consolide les r√©sultats des analyses <b>SonarQube</b> (qualit√© du code, s√©curit√©) et <b>Trivy</b> (vuln√©rabilit√©s syst√®mes et images Docker).",
        styles['NormalGray']
    ))
    elements.append(Spacer(1, 20))

    # === Section SonarQube ===
    elements.append(Paragraph("‚úÖ R√©sultats SonarQube", styles['Section']))

    if sonar_metrics and 'component' in sonar_metrics:
        measures = {m['metric']: m['value'] for m in sonar_metrics['component']['measures']}
        data = [
            ["M√©trique", "Valeur"],
            ["üêû Bugs", measures.get("bugs", "0")],
            ["üîí Vuln√©rabilit√©s", measures.get("vulnerabilities", "0")],
            ["üí® Code Smells", measures.get("code_smells", "0")],
            ["üìà Couverture (%)", measures.get("coverage", "0")],
            ["üìä Lignes de code", measures.get("ncloc", "0")],
            ["üìë Densit√© duplications (%)", measures.get("duplicated_lines_density", "0")]
        ]
        table = Table(data, colWidths=[250, 150])
        table.setStyle(TableStyle([
            ('BACKGROUND', (0,0), (-1,0), colors.HexColor("#1F4E79")),
            ('TEXTCOLOR', (0,0), (-1,0), colors.white),
            ('ALIGN', (0,0), (-1,-1), 'CENTER'),
            ('FONTNAME', (0,0), (-1,0), 'Helvetica-Bold'),
            ('GRID', (0,0), (-1,-1), 0.5, colors.grey),
        ]))
        elements.append(table)

        # üß† Ajout d‚Äôun r√©sum√© intelligent
        bugs = measures.get("bugs", "0")
        vulns = measures.get("vulnerabilities", "0")
        smells = measures.get("code_smells", "0")
        coverage = measures.get("coverage", "0")
        advice_text = f"""
        üìò <b>R√©sum√© SonarQube :</b><br/>
        - Bugs d√©tect√©s : {bugs}<br/>
        - Vuln√©rabilit√©s : {vulns}<br/>
        - Code Smells : {smells}<br/>
        - Couverture de tests : {coverage}%<br/>
        <br/>
        üí° <b>Conseil :</b> Corrige en priorit√© les vuln√©rabilit√©s critiques et les bugs majeurs.<br/>
        Si la couverture est inf√©rieure √† 60%, augmente les tests unitaires.<br/>
        R√©vise les modules avec des code smells r√©currents pour am√©liorer la maintenabilit√©.
        """
        elements.append(Spacer(1, 10))
        elements.append(Paragraph(advice_text, styles['Advice']))

    else:
        elements.append(Paragraph("‚ö†Ô∏è Impossible de r√©cup√©rer les donn√©es SonarQube.", styles['NormalGray']))
        elements.append(Paragraph(
            "üí° Conseil : V√©rifie ton token SonarQube et les permissions d'acc√®s API dans Jenkins.",
            styles['Advice']
        ))

    elements.append(Spacer(1, 20))

    # === Section Trivy Filesystem ===
    elements.append(Paragraph("üõ°Ô∏è Analyse Trivy - Syst√®me de fichiers", styles['Section']))
    fs_rows = format_trivy_results(trivy_fs)
    fs_table = Table(fs_rows if len(fs_rows) > 1 else [["CVE", "Package", "Severity", "Installed Version", "Fixed Version"]],
                     colWidths=[100, 100, 80, 100, 100])
    fs_table.setStyle(TableStyle([
        ('BACKGROUND', (0,0), (-1,0), colors.HexColor("#C0504D")),
        ('TEXTCOLOR', (0,0), (-1,0), colors.white),
        ('ALIGN', (0,0), (-1,-1), 'CENTER'),
        ('GRID', (0,0), (-1,-1), 0.25, colors.black),
    ]))
    elements.append(fs_table)

    if len(fs_rows) == 1:
        elements.append(Paragraph("‚úÖ Aucune vuln√©rabilit√© critique ou haute trouv√©e.", styles['NormalGray']))
    else:
        elements.append(Paragraph("üí° Conseil : Corrige en priorit√© les d√©pendances avec s√©v√©rit√© 'HIGH' ou 'CRITICAL'.", styles['Advice']))

    elements.append(Spacer(1, 20))

    # === Section Trivy Image ===
    elements.append(Paragraph("üê≥ Analyse Trivy - Image Docker", styles['Section']))
    img_rows = format_trivy_results(trivy_img)
    img_table = Table(img_rows if len(img_rows) > 1 else [["CVE", "Package", "Severity", "Installed Version", "Fixed Version"]],
                      colWidths=[100, 100, 80, 100, 100])
    img_table.setStyle(TableStyle([
        ('BACKGROUND', (0,0), (-1,0), colors.HexColor("#9BBB59")),
        ('TEXTCOLOR', (0,0), (-1,0), colors.white),
        ('ALIGN', (0,0), (-1,-1), 'CENTER'),
        ('GRID', (0,0), (-1,-1), 0.25, colors.black),
    ]))
    elements.append(img_table)

    if len(img_rows) == 1:
        elements.append(Paragraph("‚úÖ Aucune vuln√©rabilit√© critique trouv√©e dans l'image.", styles['NormalGray']))
    else:
        elements.append(Paragraph(
            "üí° Conseil : Mets √† jour ton image Docker de base (Debian, Ubuntu, etc.) et les paquets vuln√©rables.",
            styles['Advice']
        ))

    # === Synth√®se globale ===
    elements.append(Spacer(1, 25))
    elements.append(Paragraph("üìà Analyse Globale & Recommandations CI/CD", styles['Section']))
    elements.append(Paragraph("""
    üîπ Int√®gre SonarQube et Trivy dans chaque build du pipeline pour un contr√¥le qualit√© continu.<br/>
    üîπ Active les seuils d‚Äô√©chec (quality gates) pour bloquer les builds vuln√©rables.<br/>
    üîπ Automatise les mises √† jour de d√©pendances via Dependabot ou Renovate.<br/>
    üîπ Exporte r√©guli√®rement les rapports pour suivi et conformit√© s√©curit√©.<br/>
    üîπ Surveille les performances du pipeline et les tendances de vuln√©rabilit√©s au fil du temps.
    """, styles['Advice']))

    doc.build(elements)
    print(f"‚úÖ Rapport PDF g√©n√©r√© : {output_file}")

# === Point d‚Äôentr√©e ===
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="G√©n√®re un rapport PDF consolid√© SonarQube + Trivy")
    parser.add_argument("--trivy-json", required=True, help="Chemin vers trivy-report.json (filesystem)")
    parser.add_argument("--trivy-image-json", required=True, help="Chemin vers trivy-image-report.json (image)")
    parser.add_argument("--sonarqube-project", required=True, help="Cl√© du projet SonarQube")
    parser.add_argument("--output", default="full_report.pdf", help="Nom du fichier PDF de sortie")
    parser.add_argument("--sonar-url", default="http://192.168.240.139:9000", help="URL SonarQube")
    parser.add_argument("--sonar-token", default=None, help="Token SonarQube pour authentification")

    args = parser.parse_args()

    trivy_fs = load_json(args.trivy_json)
    trivy_img = load_json(args.trivy_image_json)
    sonar_metrics = fetch_sonarqube_metrics(args.sonarqube_project, args.sonar_url, args.sonar_token)
    generate_pdf(trivy_fs, trivy_img, sonar_metrics, args.output)
